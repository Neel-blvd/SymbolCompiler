// Generated from Expr.g4 by ANTLR 4.13.2
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class ExprLexer extends Lexer {
	public static readonly LESS = 1;
	public static readonly GREATER = 2;
	public static readonly MULS = 3;
	public static readonly DIVIDES = 4;
	public static readonly MINUS = 5;
	public static readonly PLUS = 6;
	public static readonly OR = 7;
	public static readonly AND = 8;
	public static readonly NOT = 9;
	public static readonly DEF = 10;
	public static readonly SC = 11;
	public static readonly EQ = 12;
	public static readonly COMMA = 13;
	public static readonly LPAREN = 14;
	public static readonly RPAREN = 15;
	public static readonly LCURLY = 16;
	public static readonly RCURLY = 17;
	public static readonly CONST = 18;
	public static readonly FALSE = 19;
	public static readonly TRUE = 20;
	public static readonly READ = 21;
	public static readonly BREAK = 22;
	public static readonly STRING = 23;
	public static readonly ELSE = 24;
	public static readonly FOR = 25;
	public static readonly INT = 26;
	public static readonly INTEGER = 27;
	public static readonly RETURN = 28;
	public static readonly WHILE = 29;
	public static readonly FUNCTION = 30;
	public static readonly COMMENT = 31;
	public static readonly BOOL = 32;
	public static readonly CHAR = 33;
	public static readonly CONTINUE = 34;
	public static readonly FLOAT = 35;
	public static readonly IF = 36;
	public static readonly NONE = 37;
	public static readonly VOID = 38;
	public static readonly PROGRAM = 39;
	public static readonly WRITE = 40;
	public static readonly ID = 41;
	public static readonly WS = 42;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, "'<'", 
                                                            "'>'", "'*'", 
                                                            "'/'", "'-'", 
                                                            "'+'", "'or'", 
                                                            "'and'", "'~'", 
                                                            "'funct'", "';'", 
                                                            "'='", "','", 
                                                            "'('", "')'", 
                                                            "'{'", "'}'", 
                                                            "'triple_equal'", 
                                                            "'four_dots_around_cross'", 
                                                            "'four_dots_around_add'", 
                                                            "'left_triangle'", 
                                                            "'undertie'", 
                                                            "'two_asterisk'", 
                                                            "'left_arrow'", 
                                                            "'phi'", "'circle'", 
                                                            null, "'inverted_qmark'", 
                                                            "'sigma'", "'music'", 
                                                            "'triple_slash'", 
                                                            "'omega'", "'square'", 
                                                            "'two_tie'", 
                                                            "'two_vertical_plus'", 
                                                            "'right_arrow'", 
                                                            "'theta'", "'sleeping_eight'", 
                                                            "'pentagon'", 
                                                            "'write'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "LESS", 
                                                             "GREATER", 
                                                             "MULS", "DIVIDES", 
                                                             "MINUS", "PLUS", 
                                                             "OR", "AND", 
                                                             "NOT", "DEF", 
                                                             "SC", "EQ", 
                                                             "COMMA", "LPAREN", 
                                                             "RPAREN", "LCURLY", 
                                                             "RCURLY", "CONST", 
                                                             "FALSE", "TRUE", 
                                                             "READ", "BREAK", 
                                                             "STRING", "ELSE", 
                                                             "FOR", "INT", 
                                                             "INTEGER", 
                                                             "RETURN", "WHILE", 
                                                             "FUNCTION", 
                                                             "COMMENT", 
                                                             "BOOL", "CHAR", 
                                                             "CONTINUE", 
                                                             "FLOAT", "IF", 
                                                             "NONE", "VOID", 
                                                             "PROGRAM", 
                                                             "WRITE", "ID", 
                                                             "WS" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"LESS", "GREATER", "MULS", "DIVIDES", "MINUS", "PLUS", "OR", "AND", "NOT", 
		"DEF", "SC", "EQ", "COMMA", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "CONST", 
		"FALSE", "TRUE", "READ", "BREAK", "STRING", "ELSE", "FOR", "INT", "INTEGER", 
		"RETURN", "WHILE", "FUNCTION", "COMMENT", "BOOL", "CHAR", "CONTINUE", 
		"FLOAT", "IF", "NONE", "VOID", "PROGRAM", "WRITE", "ID", "WS",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, ExprLexer._ATN, ExprLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "Expr.g4"; }

	public get literalNames(): (string | null)[] { return ExprLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return ExprLexer.symbolicNames; }
	public get ruleNames(): string[] { return ExprLexer.ruleNames; }

	public get serializedATN(): number[] { return ExprLexer._serializedATN; }

	public get channelNames(): string[] { return ExprLexer.channelNames; }

	public get modeNames(): string[] { return ExprLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,42,387,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,
	7,38,2,39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
	1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,
	1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,
	17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,
	1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
	18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,
	20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,
	1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
	22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
	1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,4,
	26,243,8,26,11,26,12,26,244,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
	1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,
	29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
	1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,
	32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,
	1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,
	35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,
	1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
	37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,
	1,39,1,39,1,40,1,40,5,40,376,8,40,10,40,12,40,379,9,40,1,41,4,41,382,8,
	41,11,41,12,41,383,1,41,1,41,0,0,42,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
	17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
	41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
	65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,1,0,4,1,0,48,
	57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,12,13,32,
	32,389,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
	1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
	0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
	1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
	0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
	1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
	0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
	1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,85,1,0,0,0,3,87,1,0,0,
	0,5,89,1,0,0,0,7,91,1,0,0,0,9,93,1,0,0,0,11,95,1,0,0,0,13,97,1,0,0,0,15,
	100,1,0,0,0,17,104,1,0,0,0,19,106,1,0,0,0,21,112,1,0,0,0,23,114,1,0,0,0,
	25,116,1,0,0,0,27,118,1,0,0,0,29,120,1,0,0,0,31,122,1,0,0,0,33,124,1,0,
	0,0,35,126,1,0,0,0,37,139,1,0,0,0,39,162,1,0,0,0,41,183,1,0,0,0,43,197,
	1,0,0,0,45,206,1,0,0,0,47,219,1,0,0,0,49,230,1,0,0,0,51,234,1,0,0,0,53,
	242,1,0,0,0,55,246,1,0,0,0,57,261,1,0,0,0,59,267,1,0,0,0,61,273,1,0,0,0,
	63,286,1,0,0,0,65,292,1,0,0,0,67,299,1,0,0,0,69,307,1,0,0,0,71,325,1,0,
	0,0,73,337,1,0,0,0,75,343,1,0,0,0,77,358,1,0,0,0,79,367,1,0,0,0,81,373,
	1,0,0,0,83,381,1,0,0,0,85,86,5,60,0,0,86,2,1,0,0,0,87,88,5,62,0,0,88,4,
	1,0,0,0,89,90,5,42,0,0,90,6,1,0,0,0,91,92,5,47,0,0,92,8,1,0,0,0,93,94,5,
	45,0,0,94,10,1,0,0,0,95,96,5,43,0,0,96,12,1,0,0,0,97,98,5,111,0,0,98,99,
	5,114,0,0,99,14,1,0,0,0,100,101,5,97,0,0,101,102,5,110,0,0,102,103,5,100,
	0,0,103,16,1,0,0,0,104,105,5,126,0,0,105,18,1,0,0,0,106,107,5,102,0,0,107,
	108,5,117,0,0,108,109,5,110,0,0,109,110,5,99,0,0,110,111,5,116,0,0,111,
	20,1,0,0,0,112,113,5,59,0,0,113,22,1,0,0,0,114,115,5,61,0,0,115,24,1,0,
	0,0,116,117,5,44,0,0,117,26,1,0,0,0,118,119,5,40,0,0,119,28,1,0,0,0,120,
	121,5,41,0,0,121,30,1,0,0,0,122,123,5,123,0,0,123,32,1,0,0,0,124,125,5,
	125,0,0,125,34,1,0,0,0,126,127,5,116,0,0,127,128,5,114,0,0,128,129,5,105,
	0,0,129,130,5,112,0,0,130,131,5,108,0,0,131,132,5,101,0,0,132,133,5,95,
	0,0,133,134,5,101,0,0,134,135,5,113,0,0,135,136,5,117,0,0,136,137,5,97,
	0,0,137,138,5,108,0,0,138,36,1,0,0,0,139,140,5,102,0,0,140,141,5,111,0,
	0,141,142,5,117,0,0,142,143,5,114,0,0,143,144,5,95,0,0,144,145,5,100,0,
	0,145,146,5,111,0,0,146,147,5,116,0,0,147,148,5,115,0,0,148,149,5,95,0,
	0,149,150,5,97,0,0,150,151,5,114,0,0,151,152,5,111,0,0,152,153,5,117,0,
	0,153,154,5,110,0,0,154,155,5,100,0,0,155,156,5,95,0,0,156,157,5,99,0,0,
	157,158,5,114,0,0,158,159,5,111,0,0,159,160,5,115,0,0,160,161,5,115,0,0,
	161,38,1,0,0,0,162,163,5,102,0,0,163,164,5,111,0,0,164,165,5,117,0,0,165,
	166,5,114,0,0,166,167,5,95,0,0,167,168,5,100,0,0,168,169,5,111,0,0,169,
	170,5,116,0,0,170,171,5,115,0,0,171,172,5,95,0,0,172,173,5,97,0,0,173,174,
	5,114,0,0,174,175,5,111,0,0,175,176,5,117,0,0,176,177,5,110,0,0,177,178,
	5,100,0,0,178,179,5,95,0,0,179,180,5,97,0,0,180,181,5,100,0,0,181,182,5,
	100,0,0,182,40,1,0,0,0,183,184,5,108,0,0,184,185,5,101,0,0,185,186,5,102,
	0,0,186,187,5,116,0,0,187,188,5,95,0,0,188,189,5,116,0,0,189,190,5,114,
	0,0,190,191,5,105,0,0,191,192,5,97,0,0,192,193,5,110,0,0,193,194,5,103,
	0,0,194,195,5,108,0,0,195,196,5,101,0,0,196,42,1,0,0,0,197,198,5,117,0,
	0,198,199,5,110,0,0,199,200,5,100,0,0,200,201,5,101,0,0,201,202,5,114,0,
	0,202,203,5,116,0,0,203,204,5,105,0,0,204,205,5,101,0,0,205,44,1,0,0,0,
	206,207,5,116,0,0,207,208,5,119,0,0,208,209,5,111,0,0,209,210,5,95,0,0,
	210,211,5,97,0,0,211,212,5,115,0,0,212,213,5,116,0,0,213,214,5,101,0,0,
	214,215,5,114,0,0,215,216,5,105,0,0,216,217,5,115,0,0,217,218,5,107,0,0,
	218,46,1,0,0,0,219,220,5,108,0,0,220,221,5,101,0,0,221,222,5,102,0,0,222,
	223,5,116,0,0,223,224,5,95,0,0,224,225,5,97,0,0,225,226,5,114,0,0,226,227,
	5,114,0,0,227,228,5,111,0,0,228,229,5,119,0,0,229,48,1,0,0,0,230,231,5,
	112,0,0,231,232,5,104,0,0,232,233,5,105,0,0,233,50,1,0,0,0,234,235,5,99,
	0,0,235,236,5,105,0,0,236,237,5,114,0,0,237,238,5,99,0,0,238,239,5,108,
	0,0,239,240,5,101,0,0,240,52,1,0,0,0,241,243,7,0,0,0,242,241,1,0,0,0,243,
	244,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,54,1,0,0,0,246,247,5,105,
	0,0,247,248,5,110,0,0,248,249,5,118,0,0,249,250,5,101,0,0,250,251,5,114,
	0,0,251,252,5,116,0,0,252,253,5,101,0,0,253,254,5,100,0,0,254,255,5,95,
	0,0,255,256,5,113,0,0,256,257,5,109,0,0,257,258,5,97,0,0,258,259,5,114,
	0,0,259,260,5,107,0,0,260,56,1,0,0,0,261,262,5,115,0,0,262,263,5,105,0,
	0,263,264,5,103,0,0,264,265,5,109,0,0,265,266,5,97,0,0,266,58,1,0,0,0,267,
	268,5,109,0,0,268,269,5,117,0,0,269,270,5,115,0,0,270,271,5,105,0,0,271,
	272,5,99,0,0,272,60,1,0,0,0,273,274,5,116,0,0,274,275,5,114,0,0,275,276,
	5,105,0,0,276,277,5,112,0,0,277,278,5,108,0,0,278,279,5,101,0,0,279,280,
	5,95,0,0,280,281,5,115,0,0,281,282,5,108,0,0,282,283,5,97,0,0,283,284,5,
	115,0,0,284,285,5,104,0,0,285,62,1,0,0,0,286,287,5,111,0,0,287,288,5,109,
	0,0,288,289,5,101,0,0,289,290,5,103,0,0,290,291,5,97,0,0,291,64,1,0,0,0,
	292,293,5,115,0,0,293,294,5,113,0,0,294,295,5,117,0,0,295,296,5,97,0,0,
	296,297,5,114,0,0,297,298,5,101,0,0,298,66,1,0,0,0,299,300,5,116,0,0,300,
	301,5,119,0,0,301,302,5,111,0,0,302,303,5,95,0,0,303,304,5,116,0,0,304,
	305,5,105,0,0,305,306,5,101,0,0,306,68,1,0,0,0,307,308,5,116,0,0,308,309,
	5,119,0,0,309,310,5,111,0,0,310,311,5,95,0,0,311,312,5,118,0,0,312,313,
	5,101,0,0,313,314,5,114,0,0,314,315,5,116,0,0,315,316,5,105,0,0,316,317,
	5,99,0,0,317,318,5,97,0,0,318,319,5,108,0,0,319,320,5,95,0,0,320,321,5,
	112,0,0,321,322,5,108,0,0,322,323,5,117,0,0,323,324,5,115,0,0,324,70,1,
	0,0,0,325,326,5,114,0,0,326,327,5,105,0,0,327,328,5,103,0,0,328,329,5,104,
	0,0,329,330,5,116,0,0,330,331,5,95,0,0,331,332,5,97,0,0,332,333,5,114,0,
	0,333,334,5,114,0,0,334,335,5,111,0,0,335,336,5,119,0,0,336,72,1,0,0,0,
	337,338,5,116,0,0,338,339,5,104,0,0,339,340,5,101,0,0,340,341,5,116,0,0,
	341,342,5,97,0,0,342,74,1,0,0,0,343,344,5,115,0,0,344,345,5,108,0,0,345,
	346,5,101,0,0,346,347,5,101,0,0,347,348,5,112,0,0,348,349,5,105,0,0,349,
	350,5,110,0,0,350,351,5,103,0,0,351,352,5,95,0,0,352,353,5,101,0,0,353,
	354,5,105,0,0,354,355,5,103,0,0,355,356,5,104,0,0,356,357,5,116,0,0,357,
	76,1,0,0,0,358,359,5,112,0,0,359,360,5,101,0,0,360,361,5,110,0,0,361,362,
	5,116,0,0,362,363,5,97,0,0,363,364,5,103,0,0,364,365,5,111,0,0,365,366,
	5,110,0,0,366,78,1,0,0,0,367,368,5,119,0,0,368,369,5,114,0,0,369,370,5,
	105,0,0,370,371,5,116,0,0,371,372,5,101,0,0,372,80,1,0,0,0,373,377,7,1,
	0,0,374,376,7,2,0,0,375,374,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,377,
	378,1,0,0,0,378,82,1,0,0,0,379,377,1,0,0,0,380,382,7,3,0,0,381,380,1,0,
	0,0,382,383,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,385,1,0,0,0,385,
	386,6,41,0,0,386,84,1,0,0,0,4,0,244,377,383,1,6,0,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ExprLexer.__ATN) {
			ExprLexer.__ATN = new ATNDeserializer().deserialize(ExprLexer._serializedATN);
		}

		return ExprLexer.__ATN;
	}


	static DecisionsToDFA = ExprLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}